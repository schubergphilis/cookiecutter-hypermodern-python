name: Release

on:
  push:
    branches:
      - main
permissions:
  id-token: write # Required for OIDC with AWS
  contents: read # For checkout

env:
  RELEASE_PYTHON_VERSION: "3.11" # Python version used for the release & lambda bundles

jobs:
  conventional-commits:
    name: Conventional commits style enforcement
    runs-on: ubuntu-latest
    steps:
      - name: Checkout git repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up python
        uses: ./.github/actions/set-up-python-with-poetry
        with:
          python-version: "3.11"
          install-poetry: "false"
      - name: Install gitlint
        run: |
          pip install --constraint=.github/constraints.txt gitlint
          gitlint --version
      - name: Run gitlint for the latest commit
        run: gitlint

  release:
    name: Release
    needs: conventional-commits
    runs-on: ubuntu-latest
    concurrency: release
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Check if there is a parent commit
        id: check-parent-commit
        run: |
          echo "{sha}=$(git rev-parse --verify --quiet HEAD^)" >> $GITHUB_OUTPUT

      - name: Set up Python with Poetry
        uses: ./.github/actions/set-up-python-with-poetry
        with:
          python-version: ${{"{{"}} env.RELEASE_PYTHON_VERSION {{"}}"}}

      - name: Configure AWS & CodeArtifact auth
        uses: ./.github/actions/aws-auth-with-codeartifact

      - name: Python Semantic Release
        id: release
        uses: python-semantic-release/python-semantic-release@v8.3.0
        with:
          github_token: ${{"{{"}} secrets.GH_SEMANTIC_RELEASE_PAT {{"}}"}}

      - name: Publish package distributions to GitHub Releases
        uses: python-semantic-release/upload-to-gh-release@main
        if: steps.release.outputs.released == 'true'
        with:
          github_token: ${{"{{"}} secrets.GH_SEMANTIC_RELEASE_PAT {{"}}"}}
{% if cookiecutter.publish_to_codeartifact == 'Yes' %}
      - name: Publish to CodeArtifact
        if: steps.release.outputs.released == 'true'
        run: |
          poetry config repositories.publish-target ${CODEARTIFACT_ENDPOINT}
          # For publishing to a CodeArtifact repo, the 'simple/' suffix must be **omitted**
          poetry config http-basic.publish-target aws ${CODEARTIFACT_TOKEN}

          poetry build
          poetry publish -r publish-target
{% endif -%}
{% if cookiecutter.create_lambda_bundles == 'Yes' %}
      - name: Create lambda bundles
        if: steps.release.outputs.released == 'true'
        run: |
          # PIP_EXTRA_INDEX_URL is used by pip to fetch requirements from private PyPi repo,
          # it must include the 'simple/' suffix for pulling the packages from CodeArtifact repos
          PIP_EXTRA_INDEX_URL=$(sed -e "s^//^//aws:${CODEARTIFACT_TOKEN}@^" <<<"${CODEARTIFACT_ENDPOINT}simple/")

          poetry export --format=requirements.txt --without-hashes -o requirements.txt
          poetry build --format wheel

          pip install --no-compile --no-deps -r requirements.txt --extra-index-url ${PIP_EXTRA_INDEX_URL} -t layer
          pip install --no-compile --no-deps ./dist/*.whl -t lambda

          mkdir lambda-bundles

          (cd lambda && zip -r ../lambda-bundles/{{ cookiecutter.project_name }}-${NEW_VERSION}-py${RELEASE_PYTHON_VERSION}.zip .)
          (cd layer && zip -r ../lambda-bundles/{{ cookiecutter.project_name }}-${NEW_VERSION}-layer-py${RELEASE_PYTHON_VERSION}.zip .)
        env:
          NEW_VERSION: ${{"{{"}} steps.release.outputs.version {{"}}"}}

      - name: Upload lambda bundles to S3
        if: steps.release.outputs.released == 'true'
        run: |
          export $(printf "AWS_ACCESS_KEY_ID=%s AWS_SECRET_ACCESS_KEY=%s AWS_SESSION_TOKEN=%s" \
          $(aws sts assume-role \
          --role-arn {{ cookiecutter.aws_admin_role_arn }} \
          --external-id {{ cookiecutter.aws_admin_role_external_id }} \
          --role-session-name {{ cookiecutter.aws_admin_session_name }} \
          --query "Credentials.[AccessKeyId,SecretAccessKey,SessionToken]" \
          --output text))

          aws s3 cp --recursive --include "*.zip" lambda-bundles/ {{ cookiecutter.aws_artifacts_s3url }}

      - name: Archive lambda bundles
        uses: actions/upload-artifact@v3
        with:
          name: lambda-bundles
          path: lambda-bundles
{% endif -%}
