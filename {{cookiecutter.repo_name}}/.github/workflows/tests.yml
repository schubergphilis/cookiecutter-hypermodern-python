name: Tests

on:
  - pull_request
  - workflow_dispatch
permissions:
  id-token: write # Required for OIDC with AWS
  contents: read # For checkout

jobs:
  conventional-commits:
    name: Conventional commits style enforcement
    # Only run this for pull requests
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout git repository
        uses: actions/checkout@v3
        with:
          ref: ${{"{{"}} github.event.pull_request.head.ref {{"}}"}}
          fetch-depth: 0
      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Upgrade pip
        run: |
          pip install --constraint=.github/workflows/constraints.txt pip
          pip --version
      - name: Install gitlint
        run: |
          pip install --constraint=.github/workflows/constraints.txt gitlint
          gitlint --version
      - name: Run gitlint for all commits in the PR
        run: |
          git fetch origin
          gitlint --commits "origin/${GITHUB_BASE_REF}..HEAD"

  tests:
    name: ${{"{{"}} matrix.session {{"}}"}} ${{"{{"}} matrix.python {{"}}"}} / ${{"{{"}} matrix.os {{"}}"}}
    runs-on: ${{"{{"}} matrix.os {{"}}"}}
    strategy:
      fail-fast: false
      matrix:
        include:
          - { python: "3.11", os: "ubuntu-latest", session: "pre-commit" }
          - { python: "3.11", os: "ubuntu-latest", session: "safety" }
          - { python: "3.11", os: "ubuntu-latest", session: "mypy" }
          - { python: "3.10", os: "ubuntu-latest", session: "mypy" }
          - { python: "3.11", os: "ubuntu-latest", session: "tests" }
          - { python: "3.10", os: "ubuntu-latest", session: "tests" }
          - { python: "3.11", os: "windows-latest", session: "tests" }
          - { python: "3.11", os: "macos-latest", session: "tests" }
          - { python: "3.11", os: "ubuntu-latest", session: "typeguard" }
          - { python: "3.11", os: "ubuntu-latest", session: "xdoctest" }
          - { python: "3.11", os: "ubuntu-latest", session: "docs-build" }

    env:
      NOXSESSION: ${{"{{"}} matrix.session {{"}}"}}
      FORCE_COLOR: "1"
      PRE_COMMIT_COLOR: "always"

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: {{ cookiecutter.aws_region }}
          role-to-assume: {{ cookiecutter.aws_oidc_role_arn }}
          role-session-name: {{ cookiecutter.aws_oidc_session_name }}

      - name: Get AWS CodeArtifact Auth Token
        run: |
          export $(printf "AWS_ACCESS_KEY_ID=%s AWS_SECRET_ACCESS_KEY=%s AWS_SESSION_TOKEN=%s" \
          $(aws sts assume-role \
          --role-arn {{ cookiecutter.aws_admin_role_arn }} \
          --external-id {{ cookiecutter.aws_admin_role_external_id }} \
          --role-session-name {{ cookiecutter.aws_admin_session_name }} \
          --query "Credentials.[AccessKeyId,SecretAccessKey,SessionToken]" \
          --output text))

          CODEARTIFACT_TOKEN=$(aws codeartifact get-authorization-token \
          --domain {{ cookiecutter.aws_codeartifact_domain }} \
          --domain-owner {{ cookiecutter.aws_codeartifact_domain_owner }} \
          --query authorizationToken --output text)

          echo "CODEARTIFACT_TOKEN=${CODEARTIFACT_TOKEN}" >> $GITHUB_ENV

      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Set up Python ${{"{{"}} matrix.python {{"}}"}}
        uses: actions/setup-python@v4
        with:
          python-version: ${{"{{"}} matrix.python {{"}}"}}

      - name: Upgrade pip
        run: |
          pip install --constraint=.github/workflows/constraints.txt pip
          pip --version

      - name: Upgrade pip in virtual environments
        shell: python
        run: |
          import os
          import pip

          with open(os.environ["GITHUB_ENV"], mode="a") as io:
              print(f"VIRTUALENV_PIP={pip.__version__}", file=io)

      - name: Install Poetry
        run: |
          pipx install --pip-args=--constraint=.github/workflows/constraints.txt poetry
          poetry --version

      - name: Configure CodeArtifact Auth for Poetry
        # This is for fetching packages from private repo. The repo URL has to be provided in the
        # `tool.poetry.source` section of pyproject.toml
        run: |
          poetry config http-basic.{{ cookiecutter.aws_codeartifact_pypi_repo_name }} aws ${{"{{"}} env.CODEARTIFACT_TOKEN {{"}}"}}

      - name: Install Nox
        run: |
          pipx install --pip-args=--constraint=.github/workflows/constraints.txt nox
          nox --version

      - name: Compute pre-commit cache key
        if: matrix.session == 'pre-commit'
        id: pre-commit-cache
        shell: python
        run: |
          import hashlib
          import sys
          import uuid

          python = "py{}.{}".format(*sys.version_info[:2])
          payload = sys.version.encode() + sys.executable.encode()
          digest = hashlib.sha256(payload).hexdigest()
          result = {{ '"${{ runner.os }}-{}-{}-pre-commit".format(python, digest[:8])' }}

          with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
              print(f"{result}={result}", file=fh)

      - name: Restore pre-commit cache
        uses: actions/cache@v3
        if: matrix.session == 'pre-commit'
        with:
          path: ~/.cache/pre-commit
          key: {{ "${{ steps.pre-commit-cache.outputs.result }}-${{ hashFiles('.pre-commit-config.yaml') }}" }}
          restore-keys: |
            {{ "${{ steps.pre-commit-cache.outputs.result }}-" }}

      - name: Run Nox
        run: |
          nox --python=${{"{{"}} matrix.python {{"}}"}}

      - name: Upload coverage data
        if: always() && matrix.session == 'tests'
        uses: "actions/upload-artifact@v3"
        with:
          name: coverage-data
          path: ".coverage.*"

      - name: Upload documentation
        if: matrix.session == 'docs-build'
        uses: actions/upload-artifact@v3
        with:
          name: docs
          path: docs/_build

  coverage:
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Upgrade pip
        run: |
          pip install --constraint=.github/workflows/constraints.txt pip
          pip --version

      - name: Install Poetry
        run: |
          pipx install --pip-args=--constraint=.github/workflows/constraints.txt poetry
          poetry --version

      - name: Install Nox
        run: |
          pipx install --pip-args=--constraint=.github/workflows/constraints.txt nox
          nox --version

      - name: Download coverage data
        uses: actions/download-artifact@v3
        with:
          name: coverage-data

      - name: Combine coverage data and display human readable report
        run: |
          nox --session=coverage

      - name: Create coverage report
        run: |
          nox --session=coverage -- xml
