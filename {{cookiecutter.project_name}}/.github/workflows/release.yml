name: Release

on:
  push:
    branches:
      - main
      - master
permissions:
  id-token: write # Required for OIDC with AWS
  contents: read # For checkout

jobs:
  conventional-commits:
    name: Conventional commits style enforcement
    runs-on: ubuntu-latest
    steps:
      - name: Checkout git repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Upgrade pip
        run: |
          pip install --constraint=.github/workflows/constraints.txt pip
          pip --version
      - name: Install gitlint
        run: |
          pip install --constraint=.github/workflows/constraints.txt gitlint
          gitlint --version
      - name: Run gitlint for the latest commit
        run: gitlint

  release:
    name: Release
    needs: conventional-commits
    runs-on: ubuntu-latest
    concurrency: release
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: {{ cookiecutter.aws_region }}
          role-to-assume: {{ cookiecutter.aws_oidc_role_arn }}
          role-session-name: {{ cookiecutter.aws_oidc_session_name }}

      - name: Get AWS CodeArtifact Auth Token
        run: |
          export $(printf "AWS_ACCESS_KEY_ID=%s AWS_SECRET_ACCESS_KEY=%s AWS_SESSION_TOKEN=%s" \
          $(aws sts assume-role \
          --role-arn {{ cookiecutter.aws_admin_role_arn }} \
          --external-id {{ cookiecutter.aws_admin_role_external_id }} \
          --role-session-name {{ cookiecutter.aws_admin_session_name }} \
          --query "Credentials.[AccessKeyId,SecretAccessKey,SessionToken]" \
          --output text))

          CODEARTIFACT_PYPI_URL=$(aws codeartifact get-repository-endpoint \
          --domain {{ cookiecutter.aws_codeartifact_domain }} \
          --domain-owner {{ cookiecutter.aws_codeartifact_domain_owner }} \
          --repository {{ cookiecutter.aws_codeartifact_pypi_repo_name }} \
          --format pypi --output text)

          CODEARTIFACT_TOKEN=$(aws codeartifact get-authorization-token \
          --domain {{ cookiecutter.aws_codeartifact_domain }} \
          --domain-owner {{ cookiecutter.aws_codeartifact_domain_owner }} \
          --query authorizationToken --output text)

          echo "CODEARTIFACT_PYPI_URL=${CODEARTIFACT_PYPI_URL}" >> $GITHUB_ENV
          echo "CODEARTIFACT_TOKEN=${CODEARTIFACT_TOKEN}" >> $GITHUB_ENV

      - name: Check out the repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Upgrade pip
        run: |
          pip install --constraint=.github/workflows/constraints.txt pip
          pip --version

      - name: Install Poetry
        run: |
          pip install --constraint=.github/workflows/constraints.txt poetry
          poetry --version

      - name: Check if there is a parent commit
        id: check-parent-commit
        run: |
          echo "::set-output name=sha::$(git rev-parse --verify --quiet HEAD^)"

      - name: Configure CodeArtifact Auth for Poetry
        # This is for fetching packages from private repo. The repo URL has to be provided in the
        # `tool.poetry.source` section of pyproject.toml
        run: |
          poetry config http-basic.{{ cookiecutter.aws_codeartifact_pypi_repo_name }} aws ${{"{{"}} env.CODEARTIFACT_TOKEN {{"}}"}}

      - name: Install python-semantic-release
        run: |
          pip install --constraint=.github/workflows/constraints.txt python-semantic-release

      - name: Python Semantic Release
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "action@github.com"
          semantic-release publish -v DEBUG -D commit_author="github-actions <action@github.com>" \
          -D repository_url=${{"{{"}} env.CODEARTIFACT_PYPI_URL {{"}}"}}
        env:
          GH_TOKEN: ${{"{{"}} secrets.GH_SEMANTIC_RELEASE_PAT {{"}}"}}
          REPOSITORY_USERNAME: aws
          REPOSITORY_PASSWORD: ${{"{{"}} env.CODEARTIFACT_TOKEN {{"}}"}}
